initSidebarItems({"enum":[["RunningTime",""]],"struct":[["DenseVecStorage","Dense vector storage. Has a redirection 2-way table between entities and components, allowing to leave no gaps within the data."],["Dispatcher","The dispatcher struct, allowing systems to be executed in parallel."],["DispatcherBuilder","Builder for the [`Dispatcher`]."],["Entity","`Entity` type, as seen by the user."],["Fetch","Return value of [`Resources::fetch`]."],["FetchMut","Return value of [`Resources::fetch_mut`]."],["FlaggedStorage","Wrapper storage that stores modifications to components in a bitset."],["HashMapStorage","HashMap-based storage. Best suited for rare components."],["VecStorage","Vector storage. Uses a simple `Vec`. Supposed to have maximum performance for the components mostly present in entities."],["World","The `World` struct contains the component storages and other resources."]],"trait":[["Component","Abstract component type. Doesn't have to be Copy or even Clone."],["Join","The purpose of the `Join` trait is to provide a way to access multiple storages at the same time with the merged bit set."],["ParJoin","The purpose of the `ParJoin` trait is to provide a way to access multiple storages in parallel at the same time with the merged bit set."],["Resource","A resource defines a set of data which can only be accessed according to Rust's typical borrowing model (one writer xor multiple readers)."],["System","A `System`, executed with a set of required [`Resource`]s."]],"type":[["ReadStorage","A storage with read access."],["WriteStorage","A storage with read and write access."]]});