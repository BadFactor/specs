initSidebarItems({"enum":[["InsertResult","The status of an `insert()`ion into a storage."],["RunningTime",""]],"mod":[["data","Reexports for types implementing `SystemData`."],["entity","Entity related types."],["prelude","Reexports for very common types."],["storages","Different types of storages you can use for your components."]],"struct":[["AsyncDispatcher","Like, `Dispatcher` but works asynchronously."],["CheckStorage","A storage type that iterates entities that have a particular component type, but does not return the component."],["Dispatcher","The dispatcher struct, allowing systems to be executed in parallel."],["DispatcherBuilder","Builder for the [`Dispatcher`]."],["Entities","The entities of this ECS."],["Entity","`Entity` type, as seen by the user."],["JoinIter","`JoinIter` is an `Iterator` over a group of `Storages`."],["JoinParIter","`JoinParIter` is a `ParallelIterator` over a group of `Storages`."],["World","The `World` struct contains the component storages and other resources."]],"trait":[["Component","Abstract component type. Doesn't have to be Copy or even Clone."],["Join","The purpose of the `Join` trait is to provide a way to access multiple storages at the same time with the merged bit set."],["ParJoin","The purpose of the `ParJoin` trait is to provide a way to access multiple storages in parallel at the same time with the merged bit set."],["Resource","A resource defines a set of data which can only be accessed according to Rust's typical borrowing model (one writer xor multiple readers)."],["RunNow","Trait for fetching data and running systems. Automatically implemented for systems."],["System","A `System`, executed with a set of required [`Resource`]s."],["UnprotectedStorage","Used by the framework to quickly join components."]],"type":[["Index","An index is basically the id of an `Entity`."]]});